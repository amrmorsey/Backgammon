/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Client;

import backgammon.Server;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author macbookpro
 */
public class Client extends javax.swing.JFrame implements Runnable, ActionListener {

    /**
     * Creates new form Client
     */
    static int hit = 0; // number of hits
    static boolean myTurn = false;  // is servers turn.
    static boolean isWin = false; // did he win.
    static ServerSocket ss; // creates a server socket
    static Socket s; // socket for client to connect on
    Thread t = new Thread(this); // thread of this class
    static PrintWriter out; // to send messages to client.
    static BufferedReader in ; // to recieve from client.
    panel p = new panel(); // instance of object panel.
    JButton roll = new JButton();
    int i;
    int j;
    Random rn = new Random();
    public Client() {
        super("Client");
        try {
            s = new Socket("localhost", 8080); // connects to server
            PrintWriter out = new PrintWriter(s.getOutputStream(), true); // establish output
            BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream())); // establish input
            
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        roll.setText("Roll Dice");
        roll.addActionListener(this);
        this.add(p);
        setSize(682, 800);
        this.add(roll);
        this.setVisible(true);
        initComponents();
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 682, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while(true){
            try {
                String serverMove; 
                out = new PrintWriter(s.getOutputStream(), true);
                in = new BufferedReader(new InputStreamReader(s.getInputStream()));
                
                serverMove = in.readLine(); // gets the move that the server did.
                System.out.println(serverMove);
                mimicMove(serverMove); // tries to apply the same move here.
                if(p.isWin()){
                  JOptionPane.showMessageDialog(this,"you win");
                  this.dispose();
                }
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public static void sendMove(String s){
        out.println(s);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if(myTurn){
            i = rn.nextInt((6 - 1) + 1) + 1;
            j = rn.nextInt((6 - 1) + 1) + 1;
       
            JOptionPane.showMessageDialog(this,"First Die = "+i);
            p.seti(i);
            //p.seti(j);
            sendMove(""+i);
            //sendMove(""+j);
            myTurn = false;
        }
    }
        public void mimicMove(String s){
        if(s.equalsIgnoreCase("1")){
            if(p.ones<1)p.ones++;
            myTurn =true;
                p.repaint();
        }
        if(s.equalsIgnoreCase("2")){
            if(p.twos<2)p.twos++;
            myTurn =true;
                p.repaint();
        }
        if(s.equalsIgnoreCase("3")){
            if(p.threes<3)p.threes++;
            myTurn =true;
                p.repaint();
        }
        if(s.equalsIgnoreCase("4")){
            if(p.fours<4)p.fours++;
            myTurn =true;
                p.repaint();
        }
        if(s.equalsIgnoreCase("5")){
            if(p.fives<5)p.fives++;
            myTurn =true;
                p.repaint();
        }
        if(s.equalsIgnoreCase("6")){
            if(p.sixs<6)p.sixs++;
            myTurn =true;
                p.repaint();
        }
    }
}
class panel extends javax.swing.JPanel{

    /**
     * Creates new form panel
     */
    Toolkit t = Toolkit.getDefaultToolkit(); 
    Image bg = t.getImage("bg.png");//sea
    Image checker = t.getImage("checker.png");//red house
    int i =0;
    int one =0;
    int two =0;
    int three =0;
    int four =0;
    int five =0;
    int six = 0;
    int ones =0;
    int twos =0;
    int threes =0;
    int fours =0;
    int fives =0;
    int sixs = 0;

    public panel() {
        super(true);
        this.setSize(700, 962);
        this.setOpaque(false);
        initComponents();
    }
            /**
     * draws all the images into the panel.
     * @param g 
     */
    public void paintComponent(Graphics g){
        g.drawImage(bg, 0, 0, this);
        int x = 30;
        for(int j =0; j<one;j++){
            g.drawImage(checker,40, x, this);
            x = x+65;
        }
        ///////
        x = 30;
        for(int j =0; j<two;j++){
            g.drawImage(checker,125, x, this);
            x = x + 65;
        }
        x = 30;
        ///////
        for(int j = 0; j<three;j++){
            g.drawImage(checker,215, x, this);
            x = x +65;
            
        }
        ///////
        x = 30;
        for(int j =0; j<four;j++){
            g.drawImage(checker,304, x, this);
            x = x +65;
        }
        ////
        x = 30;
        for(int j =0; j<five;j++){
            g.drawImage(checker,393, x, this);
            x = x +65;
        }
        ////
        x = 30;
        for(int j =0; j<six;j++){
            g.drawImage(checker,482, x, this);
            x = x+65;
        }
        ///////////////////////////
          for(int j =0; j<ones;j++){
            g.drawImage(checker,40, 705, this);
        }
        ///////
        int s = 705;
        for(int j =0; j<twos;j++){
            g.drawImage(checker,126, s, this);
            s = s - 65;
        }
        s = 705;
        ///////
        for(int j = 0; j<threes;j++){
            g.drawImage(checker,215, s, this);
            s = s -65;
            
        }
        ///////
        s = 705;
        for(int j =0; j<fours;j++){
            g.drawImage(checker,304, s, this);
            s = s -65;
        }
        ////
        s = 705;
        for(int j =0; j<fives;j++){
            g.drawImage(checker,393, s, this);
            s = s -65;
        }
        ////
        s = 705;
        for(int j =0; j<sixs;j++){
            g.drawImage(checker,482, s, this);
            s = s-65;
        }
    }
    void seti(int i ){
       this.i = i;
       
       switch(this.i){
           case 1:if(one<6)one++;break;
           case 2:if(two<5)two++;break;
           case 3:if(three<4)three++;break;
           case 4:if(four<3)four++;break;
           case 5:if(five<2)five++;break;
           case 6:if(six<1)six++;break;    
       }
       repaint();
    }
    boolean isWin(){
        if(one == 6&&two ==5&& three ==4&&four==3&&five ==2&&six==1)
            return true;
        return false;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>                        


    // Variables declaration - do not modify                     
    // End of variables declaration                   

}

